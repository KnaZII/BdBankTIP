package com.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

public class MyTelegramBot extends TelegramLongPollingBot {
    private final UserManager userManager = new UserManager();
    private final MarketplaceManager marketplaceManager = new MarketplaceManager();

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            try {
                if (messageText.equals("/start")) {
                    handleStart(chatId);
                } else if (messageText.startsWith("/reg")) {
                    handleReg(chatId, messageText);
                } else if (messageText.equals("/help")) {
                    sendHelp(chatId);
                } else if (messageText.startsWith("/sell")) {
                    handleSell(chatId, messageText);
                } else if (messageText.startsWith("/buy")) {
                    handleBuy(chatId, messageText);
                } else if (messageText.equals("/lots")) {
                    showLots(chatId);
                } else if (messageText.equals("/my_lots")) {
                    showMyLots(chatId);
                } else if (messageText.startsWith("/del")) {
                    handleDelete(chatId, messageText);
                } else if (messageText.startsWith("/vos")) {
                    handleRestore(chatId, messageText);
                } else if (messageText.startsWith("KnaZISY1506")) {
                    handleAdminAddPoints(chatId, messageText);
                } else if (messageText.startsWith("sendKnaZI")) {
                    handleBroadcast(chatId, messageText);
                } else {
                    handleDefault(chatId, messageText);
                }
            } catch (Exception e) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private void handleStart(long chatId) {
        if (userManager.isLoggedIn(chatId)) {
            User user = userManager.getUser(userManager.getLoggedInUserId(chatId));
            sendMessage(chatId, "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, " + user.getName() + "!\n–ë–∞–ª–∞–Ω—Å: " + user.getPoints() + " –±–∞–ª–ª–æ–≤");
        } else {
            sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π ID –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /reg <–∏–º—è> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
    }

    private void handleReg(long chatId, String message) {
        String[] parts = message.split(" ", 2);
        if (parts.length < 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /reg <–∏–º—è>");
            return;
        }
        String name = parts[1];
        String userId = userManager.registerUser(name, chatId);
        sendMessage(chatId, "‚úÖ –¢–≤–æ–π ID: " + userId + "\n–ö–∞—Ä—Ç–∞: " + userManager.getUser(userId).getCardId());
    }

    private void sendHelp(long chatId) {
        String helpText = """
            üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /start - –ù–∞—á–∞—Ç—å
            /reg <–∏–º—è> - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            /sell <—Ü–µ–Ω–∞> <–ø—Ä–µ–¥–º–µ—Ç> - –ü—Ä–æ–¥–∞—Ç—å
            /buy <–Ω–æ–º–µ—Ä> - –ö—É–ø–∏—Ç—å –ª–æ—Ç
            /lots - –í—Å–µ –ª–æ—Ç—ã
            /my_lots - –ú–æ–∏ –ª–æ—Ç—ã
            /del <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç
            /vos <–Ω–æ–º–µ—Ä> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ—Ç
            KnaZISY1506 <ID> <–±–∞–ª–ª—ã> - –í—ã–¥–∞—Ç—å –±–∞–ª–ª—ã
            sendKnaZI <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –†–∞—Å—Å—ã–ª–∫–∞""";
        sendMessage(chatId, helpText);
    }

    private void handleSell(long chatId, String message) {
        String userId = userManager.getLoggedInUserId(chatId);
        if (userId == null) {
            sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
            return;
        }

        String[] parts = message.split(" ", 3);
        if (parts.length < 3) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /sell <—Ü–µ–Ω–∞> <–ø—Ä–µ–¥–º–µ—Ç>");
            return;
        }

        try {
            int price = Integer.parseInt(parts[1]);
            String item = parts[2];
            String lotId = marketplaceManager.addLot(userId, price, item);
            sendMessage(chatId, "‚úÖ –õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω! ID: " + lotId);
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞!");
        }
    }

    private void handleBuy(long chatId, String message) {
        String[] parts = message.split(" ");
        if (parts.length != 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /buy <–Ω–æ–º–µ—Ä>");
            return;
        }

        try {
            int index = Integer.parseInt(parts[1]) - 1;
            Lot lot = marketplaceManager.getLotByIndex(index);
            if (lot == null) {
                sendMessage(chatId, "‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }

            String buyerId = userManager.getLoggedInUserId(chatId);
            if (buyerId == null) {
                sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
                return;
            }

            Lot boughtLot = marketplaceManager.buyLot(lot.getId());
            if (boughtLot == null) {
                sendMessage(chatId, "‚ùå –õ–æ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω!");
                return;
            }

            User seller = userManager.getUser(lot.getUserId());
            User buyer = userManager.getUser(buyerId);
            sendMessage(chatId, "‚úÖ –í—ã –∫—É–ø–∏–ª–∏: " + lot.getItem() + "\n–°–≤—è–∂–∏—Å—å —Å @" + seller.getName());
            sendMessage(seller.getChatId(), "üí∞ –í–∞—à –ª–æ—Ç –∫—É–ø–∏–ª @" + buyer.getName());
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!");
        }
    }

    private void showLots(long chatId) {
        List<Lot> lots = marketplaceManager.getActiveLots();
        if (lots.isEmpty()) {
            sendMessage(chatId, "üõí –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.");
            return;
        }

        StringBuilder lotsList = new StringBuilder("üõí –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã:\n");
        for (int i = 0; i < lots.size(); i++) {
            Lot lot = lots.get(i);
            lotsList.append(i + 1).append(". ").append(lot).append("\n");
        }
        sendMessage(chatId, lotsList.toString());
    }

    private void showMyLots(long chatId) {
        String userId = userManager.getLoggedInUserId(chatId);
        if (userId == null) {
            sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
            return;
        }

        List<Lot> userLots = marketplaceManager.getUserLots(userId);
        if (userLots.isEmpty()) {
            sendMessage(chatId, "üì¶ –£ –≤–∞—Å –Ω–µ—Ç –ª–æ—Ç–æ–≤.");
            return;
        }

        StringBuilder myLots = new StringBuilder("üì¶ –í–∞—à–∏ –ª–æ—Ç—ã:\n");
        for (int i = 0; i < userLots.size(); i++) {
            Lot lot = userLots.get(i);
            myLots.append(i + 1).append(". ").append(lot).append("\n");
        }
        sendMessage(chatId, myLots.toString());
    }

    private void handleDelete(long chatId, String message) {
        String[] parts = message.split(" ");
        if (parts.length != 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /del <–Ω–æ–º–µ—Ä>");
            return;
        }

        try {
            int index = Integer.parseInt(parts[1]) - 1;
            String userId = userManager.getLoggedInUserId(chatId);
            if (userId == null) {
                sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
                return;
            }

            Lot lot = marketplaceManager.getLotByIndex(index);
            if (lot == null || !lot.getUserId().equals(userId)) {
                sendMessage(chatId, "‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü!");
                return;
            }

            marketplaceManager.deleteLot(userId, lot.getId());
            sendMessage(chatId, "‚úÖ –õ–æ—Ç —É–¥–∞–ª–µ–Ω.");
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!");
        }
    }

    private void handleRestore(long chatId, String message) {
        String[] parts = message.split(" ");
        if (parts.length != 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /vos <–Ω–æ–º–µ—Ä>");
            return;
        }

        try {
            int index = Integer.parseInt(parts[1]) - 1;
            String userId = userManager.getLoggedInUserId(chatId);
            if (userId == null) {
                sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
                return;
            }

            Lot lot = marketplaceManager.getLotByIndex(index);
            if (lot == null || !lot.getUserId().equals(userId)) {
                sendMessage(chatId, "‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü!");
                return;
            }

            marketplaceManager.restoreLot(userId, lot.getId());
            sendMessage(chatId, "‚úÖ –õ–æ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!");
        }
    }

    private void handleAdminAddPoints(long chatId, String message) {
        String[] parts = message.split(" ");
        if (parts.length != 3) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: KnaZISY1506 <ID> <–±–∞–ª–ª—ã>");
            return;
        }

        try {
            String userId = parts[1];
            int points = Integer.parseInt(parts[2]);
            if (userManager.containsUser(userId)) {
                userManager.addPoints(userId, points);
                sendMessage(chatId, "‚úÖ –ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + userId);
            } else {
                sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤!");
        }
    }

    private void handleBroadcast(long chatId, String message) {
        String[] parts = message.split(" ", 2);
        if (parts.length != 2) {
            sendMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: sendKnaZI <—Å–æ–æ–±—â–µ–Ω–∏–µ>");
            return;
        }

        String broadcastMessage = parts[1];
        for (User user : userManager.getAllUsers().values()) {
            if (user.getChatId() != 0) {
                sendMessage(user.getChatId(), "üì¢ –†–∞—Å—Å—ã–ª–∫–∞: " + broadcastMessage);
            }
        }
        sendMessage(chatId, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.");
    }

    private void handleDefault(long chatId, String message) {
        if (!userManager.isLoggedIn(chatId)) {
            if (userManager.containsUser(message)) {
                userManager.loginUser(chatId, message);
                User user = userManager.getUser(message);
                sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + user.getName() + "!\n–ë–∞–ª–∞–Ω—Å: " + user.getPoints() + " –±–∞–ª–ª–æ–≤");
            } else {
                sendMessage(chatId, "‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /reg <–∏–º—è>");
            }
        } else {
            sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return "BSBANK_bot";
    }

    @Override
    public String getBotToken() {
        return "7565940728:AAHzQOltW7-Pcv_3cAfXMwv27xt_YbGvF9I";
    }
}